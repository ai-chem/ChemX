dataset,domain,description,instructions,condition,prompt
oxazolidinone,small molecules,You are a domain-specific chemical information extraction assistant.,"You specialize in chemistry of small molecules. In particular, your area is antibiotics and their properties.",,"Your task is to extract **every** mention of MIC or pMIC values for oxazolidinone antibiotics from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string):  ID of a molecule within the article, as cited in the text, e.g. `""5a""`, `""Compound 3""`.  
- `smiles` (string): full SMILES representation of an oxazolidinone antibiotic.  
- `target_type` (string): type of measurement, either `""MIC""` or `""pMIC""`, exactly as stated.  
- `target_relation` (string): one of `""=""`, `""<""`, or `"">""`. If no relation symbol is shown, use `""=""`.  
- `target_value` (number): the numeric value of MIC/pMIC (without quotes).  
- `target_units` (string): e.g. `""μg/mL""`, `""mg/L""`, etc.  
- `bacteria` (string): the organism against which MIC/pMIC was measured, named exactly as in the text. Record full names, abbreviations, or any related taxonomic identifiers of bacteria.
Extraction rules:
1. Extract **each** MIC or pMIC mention as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If a range is given (e.g., “2–8 μg/mL”), leave it as a range. 
4. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID into one molecule and write it as a single SMILES string.
5. If multiple measurement types appear for the same compound and bacterium (e.g., MIC₅₀, MIC₉₀), extract each separately.  
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`. 
7. The example of JSON below shows only two extracted samples, however your output should contain **all** MIC or pMIC measurements of oxazolidinone antibiotics present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""compound_id"": ""12b"",
    ""smiles"": ""CC1=CC=C(C=C1)C(=O)Nc2ccc(cc2)C(=O)N3CCCCC3=O"",
    ""target_type"": ""MIC"",
    ""target_relation"": ""<"",
    ""target_value"": 1,
    ""target_units"": ""mmol/l"",
    ""bacteria"": ""methicillin-susceptible S. aureus""
  },
  {
    ""compound_id"": ""5a"",
    ""smiles"": ""CC1=CC=CC=C1N2C=NC3=CC=CC=C23"",
    ""target_type"": ""MIC"",
    ""target_relation"": ""="",
    ""target_value"": 2,
    ""target_units"": ""μg/mL"",
    ""bacteria"": ""Escherichia coli""
  }
]"
benzimidazole,small molecules,You are a domain-specific chemical information extraction assistant.,"You specialize in chemistry of small molecules. In particular, your area is antibiotics and their properties.",,"Your task is to extract **every** mention of MIC or pMIC measurements against Staphylococcus aureus and Escherichia coli bacteria for **ALL** benzimidazole antibiotics from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string): ID of a molecule within the article, as cited in the text, e.g. `""5a""`, `""Compound 3""`.
- `smiles` (string): full SMILES representation of a benzimidazole antibiotic.
- `target_type` (string): type of measurement, either `""MIC""` or `""pMIC""`, exactly as stated.  
- `target_relation` (string): one of `""=""`, `""<""`, or `"">""`. If no relation symbol is shown, use `""=""`.  
- `target_value` (number): the numeric value of MIC/pMIC (without quotes).  
- `target_units` (string): MIC units, e.g. `""μg/mL""`, `""mg/L""`, etc.  
- `bacteria` (string): the organism against which MIC/pMIC was measured, named exactly as in the text.
Extraction rules:
1. Extract **each** MIC/pMIC mention as a separate object. If multiple MIC/pMIC are reported for the same compound against different bacteria, list them as separate entries.
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts. 
3. If a range is given (e.g., “2–8 μg/mL”), leave it as a range. 
4. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID into one molecule and write it as a single SMILES string.
5. Extract only measurements with Staphylococcus aureus and Escherichia coli. Record full names, abbreviations, or any related taxonomic identifiers of bacteria.
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
7. The example of JSON below shows only two extracted samples, however your output should contain **all** MIC or pMIC measurements of benzimidazole antibiotics present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""compound_id"": ""11h"",
    ""smiles"": ""O=C(OCC)C1=C(N(C(=O)N(C1C2=C(C=CS2)C)[H])[H])C[N]3C=NC4=C3C=C(C=C4)[N+](=O)[O-]"",
    ""target_type"": ""MIC"",
    ""target_relation"": ""<"",
    ""target_value"": 1,
    ""target_units"": ""mmol/l"",
    ""bacteria"": ""methicillin-susceptible S. aureus""
  },
  {
    ""compound_id"": ""5a"",
    ""smiles"": ""CCN1C=C(C(=O)C2=CC(=C(C=C21)N3CCN(CC3)C4=NC=CC(=N4)N)F)C(=O)O"",
    ""target_type"": ""pMIC"",
    ""target_relation"": ""<"",
    ""target_value"": 2,
    ""target_units"": ""μg/mL"",
    ""bacteria"": ""Escherichia coli""
  }
]"
cocrystals,small molecules,You are a domain-specific chemical information extraction assistant.,"You specialize in the chemistry of cocrystals and their properties. Your area of expertise includes analyzing cocrystals, their components, and photostability changes.",,"Your task is to extract **every** mention of photostability for co-crystals from a scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `name_cocrystal` (string): name of cocrystal, as cited in the text, e.g. `""CAR-HCT""`, `""DMZ-SAC""`.  
- `ratio_cocrystal` (string): molar ratio of the cocrystal components, e.g., `""2:1"", `""0.5:1"".
- `name_drug` (string): name of the drug in the cocrystal as cited in the text, e.g. `""Carvedilol""`, `""Epalrestat""`.  
- `SMILES_drug` (string): full SMILES representation of drug.  
- `name_coformer` (string): name of the coformer in the cocrystal as cited in the text, e.g. `""Saccharin""`, `""Oxalic acid""`.   
- `SMILES_coformer` (string): full SMILES representation of coformer.  
- `photostability_change` (string): one of `""decrease""`, `""does not change""`, or `""increase""`. Trend of photostability for both the cocrystal and the drug, indicating how their stability changes over time.
Extraction rules:
1. Extract **each** photostability mention as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If multiple polymorphic forms (e.g., CBZ-SAC Form I, CBZ-SAC Form II) appear for the same drug and coformer in the same ratio, extract each separately. 
4. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.  
5. The example of JSON below shows only two extracted samples, however your output should contain **all** mentions of photostability for co-crystals present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""name_cocrystal"": ""CAR-HCT"",
    ""ratio_cocrystal"": ""2:1"",
    ""name_drug"": ""Carvedilol"",
    ""SMILES_drug"": ""C1=CC(=C(C=C1O)O)C=CC2=CC(=CC(=C2)O)O"",
    ""name_coformer"": ""Saccharin"",
    ""SMILES_coformer"": ""O=C(O)CC(O)C(=O)O"",
    ""photostability_change"": ""decrease""
  },
  {
    ""name_cocrystal"": ""DMZ-SAC"",
    ""ratio_cocrystal"": ""0.5:1"",
    ""name_drug"": ""Epalrestat"",
    ""SMILES_drug"": ""C1=CC(=C(C=C1O)O)C=CC2=CC(=CC(=C2)O)O"",
    ""name_coformer"": ""Oxalic acid"",
    ""SMILES_coformer"": ""C(=C/C(=O)O)\\C(=O)O"",
    ""photostability_change"": ""does not change""
  }
]"
complexes,small molecules,You are a domain-specific chemical information extraction assistant.,You specialize in the chemistry of organometallic complexes and their properties.,Ga,"Your task is to extract **every** mention of organometallic complexes and chelate ligands from scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string): ID of a complex within the article, as cited in the text, e.g. `""L3""`, `""A31""`.  
- `compound_name` (string): abbreviated or full name of the complex or ligand as cited in the text, e.g. `""DOTA""`, `""tebroxime""`. 
- `SMILES` (string): full SMILES representation of ligand environment or single ligand.  If a complete organometallic complex is shown, extract all ligand structures without mentioning the metal (e.g., ""COc1cc(C=CC([O-])CC([O-])CC([O-])C=Cc2ccc(O)c(OC)c2)ccc1O. [C-]#[O+].[C-]#[O+].[C-]#[O+].[OH-]""). For a chelate ligand without a complete organometallic complex, extract only that ligand's structure (e.g., 'O=C(O)CN(CCN(CC(CC(=O)O)CC(=O)O)CCN(CC(=O)O)CC(=O)O').
- `SMILES_type` (string): one of `""ligand""` or `""environment""`. ""environment"" refers to the entire organometallic complex, including one or more ligands and a metal atom. ""ligand"" signifies a single chelate ligand, which is an organic molecule.
- `target_value` (number): the numeric value of logarithms of thermodynamic stability constants lgK or logK (without quotes). 
Extraction rules:
1. Extract **each** mention of `target_value` (lgK or logK) as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID or name into one molecule and write it a single SMILES string.
4. If multiple thermodynamic stability constants appear for the same complex or ligand extract each separately. 
5. Extract only structures that comply with these rules:
5.1. The complexes must contain **Ga** as the metal or the ligands must belong to complexes of that metal.
5.2. The complete molecular structure shall be given without errors in it or identifiers.
5.3. Compounds must contain more than one carbon (exclude CO, Me).
5.4. Compounds must not contain polymeric structures, attached biomolecules or carboranes, undefined radicals, undeciphered designations (e.g., amino acids) beyond the simplest abbreviations (i.e., Me, Et, Pr, Bu, Ph, Ac), names of radicals instead of their structure, or incomplete indication of the ligand structure (e.g., L = P, N).
5.5. Compounds must not be reaction intermediate or precursor.
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.  
7. The example of JSON below shows only two extracted samples, however your output should contain **all** mentions of organometallic complexes and / or chelate ligands present in the article.
Output **must** be a single JSON array, like:
[
    {
        ""compound_id"": ""L3"",
        ""compound_name"": ""DOTA"",
        ""SMILES"": ""O=C(O)CN(CCN(CC(=O)O)CC(=O)O)CC(=O)O"",
        ""SMILES_type"": ""ligand"",
        ""target"": 21.3
    },
    {
        ""compound_id"": ""A31"",
        ""compound_name"": ""tebroxime"",
        ""SMILES"": ""[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC"",
        ""SMILES_type"": ""environment"",
        ""target"": 17.9
    }
]"
complexes,small molecules,You are a domain-specific chemical information extraction assistant.,You specialize in the chemistry of organometallic complexes and their properties.,Gd,"Your task is to extract **every** mention of organometallic complexes and chelate ligands from scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string): ID of a complex within the article, as cited in the text, e.g. `""L3""`, `""A31""`.  
- `compound_name` (string): abbreviated or full name of the complex or ligand as cited in the text, e.g. `""DOTA""`, `""tebroxime""`. 
- `SMILES` (string): full SMILES representation of ligand environment or single ligand.  If a complete organometallic complex is shown, extract all ligand structures without mentioning the metal (e.g., ""COc1cc(C=CC([O-])CC([O-])CC([O-])C=Cc2ccc(O)c(OC)c2)ccc1O. [C-]#[O+].[C-]#[O+].[C-]#[O+].[OH-]""). For a chelate ligand without a complete organometallic complex, extract only that ligand's structure (e.g., 'O=C(O)CN(CCN(CC(CC(=O)O)CC(=O)O)CCN(CC(=O)O)CC(=O)O').
- `SMILES_type` (string): one of `""ligand""` or `""environment""`. ""environment"" refers to the entire organometallic complex, including one or more ligands and a metal atom. ""ligand"" signifies a single chelate ligand, which is an organic molecule.
- `target_value` (number): the numeric value of logarithms of thermodynamic stability constants lgK or logK (without quotes). 
Extraction rules:
1. Extract **each** mention of `target_value` (lgK or logK) as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID or name into one molecule and write it a single SMILES string.
4. If multiple thermodynamic stability constants appear for the same complex or ligand extract each separately. 
5. Extract only structures that comply with these rules:
5.1. The complexes must contain **Gd** as the metal or the ligands must belong to complexes of that metal.
5.2. The complete molecular structure shall be given without errors in it or identifiers.
5.3. Compounds must contain more than one carbon (exclude CO, Me).
5.4. Compounds must not contain polymeric structures, attached biomolecules or carboranes, undefined radicals, undeciphered designations (e.g., amino acids) beyond the simplest abbreviations (i.e., Me, Et, Pr, Bu, Ph, Ac), names of radicals instead of their structure, or incomplete indication of the ligand structure (e.g., L = P, N).
5.5. Compounds must not be reaction intermediate or precursor.
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.  
7. The example of JSON below shows only two extracted samples, however your output should contain **all** mentions of organometallic complexes and / or chelate ligands present in the article.
Output **must** be a single JSON array, like:
[
    {
        ""compound_id"": ""L3"",
        ""compound_name"": ""DOTA"",
        ""SMILES"": ""O=C(O)CN(CCN(CC(=O)O)CC(=O)O)CC(=O)O"",
        ""SMILES_type"": ""ligand"",
        ""target"": 21.3
    },
    {
        ""compound_id"": ""A31"",
        ""compound_name"": ""tebroxime"",
        ""SMILES"": ""[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC"",
        ""SMILES_type"": ""environment"",
        ""target"": 17.9
    }
]"
complexes,small molecules,You are a domain-specific chemical information extraction assistant.,You specialize in the chemistry of organometallic complexes and their properties.,Tc,"Your task is to extract **every** mention of organometallic complexes and chelate ligands from scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string): ID of a complex within the article, as cited in the text, e.g. `""L3""`, `""A31""`.  
- `compound_name` (string): abbreviated or full name of the complex or ligand as cited in the text, e.g. `""DOTA""`, `""tebroxime""`. 
- `SMILES` (string): full SMILES representation of ligand environment or single ligand.  If a complete organometallic complex is shown, extract all ligand structures without mentioning the metal (e.g., ""COc1cc(C=CC([O-])CC([O-])CC([O-])C=Cc2ccc(O)c(OC)c2)ccc1O. [C-]#[O+].[C-]#[O+].[C-]#[O+].[OH-]""). For a chelate ligand without a complete organometallic complex, extract only that ligand's structure (e.g., 'O=C(O)CN(CCN(CC(CC(=O)O)CC(=O)O)CCN(CC(=O)O)CC(=O)O').
- `SMILES_type` (string): one of `""ligand""` or `""environment""`. ""environment"" refers to the entire organometallic complex, including one or more ligands and a metal atom. ""ligand"" signifies a single chelate ligand, which is an organic molecule.
- `target_value` (number): the numeric value of logarithms of thermodynamic stability constants lgK or logK (without quotes). 
Extraction rules:
1. Extract **each** mention of `target_value` (lgK or logK) as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID or name into one molecule and write it a single SMILES string.
4. If multiple thermodynamic stability constants appear for the same complex or ligand extract each separately. 
5. Extract only structures that comply with these rules:
5.1. The complexes must contain **Tc** as the metal or the ligands must belong to complexes of that metal.
5.2. The complete molecular structure shall be given without errors in it or identifiers.
5.3. Compounds must contain more than one carbon (exclude CO, Me).
5.4. Compounds must not contain polymeric structures, attached biomolecules or carboranes, undefined radicals, undeciphered designations (e.g., amino acids) beyond the simplest abbreviations (i.e., Me, Et, Pr, Bu, Ph, Ac), names of radicals instead of their structure, or incomplete indication of the ligand structure (e.g., L = P, N).
5.5. Compounds must not be reaction intermediate or precursor.
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.  
7. The example of JSON below shows only two extracted samples, however your output should contain **all** mentions of organometallic complexes and / or chelate ligands present in the article.
Output **must** be a single JSON array, like:
[
    {
        ""compound_id"": ""L3"",
        ""compound_name"": ""DOTA"",
        ""SMILES"": ""O=C(O)CN(CCN(CC(=O)O)CC(=O)O)CC(=O)O"",
        ""SMILES_type"": ""ligand"",
        ""target"": 21.3
    },
    {
        ""compound_id"": ""A31"",
        ""compound_name"": ""tebroxime"",
        ""SMILES"": ""[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC"",
        ""SMILES_type"": ""environment"",
        ""target"": 17.9
    }
]"
complexes,small molecules,You are a domain-specific chemical information extraction assistant.,You specialize in the chemistry of organometallic complexes and their properties.,Lu,"Your task is to extract **every** mention of organometallic complexes and chelate ligands from scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `compound_id` (string): ID of a complex within the article, as cited in the text, e.g. `""L3""`, `""A31""`.  
- `compound_name` (string): abbreviated or full name of the complex or ligand as cited in the text, e.g. `""DOTA""`, `""tebroxime""`. 
- `SMILES` (string): full SMILES representation of ligand environment or single ligand.  If a complete organometallic complex is shown, extract all ligand structures without mentioning the metal (e.g., ""COc1cc(C=CC([O-])CC([O-])CC([O-])C=Cc2ccc(O)c(OC)c2)ccc1O. [C-]#[O+].[C-]#[O+].[C-]#[O+].[OH-]""). For a chelate ligand without a complete organometallic complex, extract only that ligand's structure (e.g., 'O=C(O)CN(CCN(CC(CC(=O)O)CC(=O)O)CCN(CC(=O)O)CC(=O)O').
- `SMILES_type` (string): one of `""ligand""` or `""environment""`. ""environment"" refers to the entire organometallic complex, including one or more ligands and a metal atom. ""ligand"" signifies a single chelate ligand, which is an organic molecule.
- `target_value` (number): the numeric value of logarithms of thermodynamic stability constants lgK or logK (without quotes). 
Extraction rules:
1. Extract **each** mention of `target_value` (lgK or logK) as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If a molecule is fully depicted in a figure, write it as a SMILES string. If a molecule is depicted as a scaffold and residues separately in different places of an article, connect them by compound ID or name into one molecule and write it a single SMILES string.
4. If multiple thermodynamic stability constants appear for the same complex or ligand extract each separately. 
5. Extract only structures that comply with these rules:
5.1. The complexes must contain **Lu** as the metal or the ligands must belong to complexes of that metal.
5.2. The complete molecular structure shall be given without errors in it or identifiers.
5.3. Compounds must contain more than one carbon (exclude CO, Me).
5.4. Compounds must not contain polymeric structures, attached biomolecules or carboranes, undefined radicals, undeciphered designations (e.g., amino acids) beyond the simplest abbreviations (i.e., Me, Et, Pr, Bu, Ph, Ac), names of radicals instead of their structure, or incomplete indication of the ligand structure (e.g., L = P, N).
5.5. Compounds must not be reaction intermediate or precursor.
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.  
7. The example of JSON below shows only two extracted samples, however your output should contain **all** mentions of organometallic complexes and / or chelate ligands present in the article.
Output **must** be a single JSON array, like:
[
    {
        ""compound_id"": ""L3"",
        ""compound_name"": ""DOTA"",
        ""SMILES"": ""O=C(O)CN(CCN(CC(=O)O)CC(=O)O)CC(=O)O"",
        ""SMILES_type"": ""ligand"",
        ""target"": 21.3
    },
    {
        ""compound_id"": ""A31"",
        ""compound_name"": ""tebroxime"",
        ""SMILES"": ""[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC.[C-]#[N+]CC(C)(C)OC"",
        ""SMILES_type"": ""environment"",
        ""target"": 17.9
    }
]"
nanozymes,nanomaterials,You are a domain-specific chemical information extraction assistant.,You specialize in nanozymes.,,"Your task is to extract **every** mention of experiments for **ALL** nanozymes from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `formula` (string): the chemical formula of the nanozyme, e.g. ""Fe3O4"", ""CuO"", etc.
- `activity` (string): catalytic activity type, typically ""peroxidase"", ""oxidase"", ""catalase"", ""laccase"", or other.
- `syngony` (string): the crystal unit of the nanozyme, e.g. ""cubic"", ""hexagonal"", ""tetragonal"", ""monoclinic"", ""orthorhombic"", ""trigonal"", ""amorphous"", ""triclinic"".
- `length` (number): the length of the nanozyme particle in nanometers.
- `width` (number): the width of the nanozyme particle in nanometers.
- `depth` (number): the depth of the nanozyme particle in nanometers.
- `surface` (string): the molecule on the surface of the nanozyme, e.g., ""naked"", ""poly(ethylene oxide)"", ""poly(N-Vinylpyrrolidone)"", ""Tetrakis(4-carboxyphenyl)porphine"", or other.
- `km_value` (number): the Michaelis constant value for the nanozyme.
- `km_unit` (string): the unit for the Michaelis constant, e.g., ""mM"", etc.
- `vmax_value` (number): the molar maximum reaction rate value.
- `vmax_unit` (string): the unit for the maximum reaction rate, e.g., ""µmol/min"", ""mol/min"", etc.
- `reaction_type` (string): the reaction type involving the substrate and co-substrate, e.g., ""TMB + H2O2"", ""H2O2 + TMB"", ""TMB"", ""ABTS + H2O2"", ""H2O2"", ""OPD + H2O2"", ""H2O2 + GSH"", or other.
- `c_min` (number): the minimum substrate concentration in catalytic assays in mM.
- `c_max` (number): the maximum substrate concentration in catalytic assays in mM.
- `c_const` (number): the constant co-substrate concentration used during assays.
- `c_const_unit` (string): the unit of measurement for co-substrate concentration.
- `ccat_value` (number): the concentration of the catalyst used in assays.
- `ccat_unit` (string): the unit of measurement for catalyst concentration.
- `ph` (number): the pH level at which experiments were conducted.
- `temperature` (number): the temperature in Celsius during the study.
Extraction rules:
1. Extract **each** nanozyme mention as a separate object. 
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts. 
3. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
4. The example of JSON below shows only two extracted samples, however your output should contain **all** nanozymes present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""formula"": ""Fe3O4"",
    ""activity"": ""peroxidase"",
    ""syngony"": ""cubic"",
    ""length"": 10,
    ""width"": 10,
    ""depth"": 2.5,
    ""surface"": ""naked"",
    ""km_value"": 0.2,
    ""km_unit"": ""mM"",
    ""vmax_value"": 2.5,
    ""vmax_unit"": ""µmol/min"",
    ""reaction_type"": ""TMB + H2O2"",
    ""c_min"": 0.01,
    ""c_max"": 1.0,
    ""c_const"": 1.0,
    ""c_const_unit"": ""mM"",
    ""ccat_value"": 0.05,
    ""ccat_unit"": ""mg/mL"",
    ""ph"": 4.0,
    ""temperature"": 25
  },
  {
    ""formula"": ""CeO2"",
    ""activity"": ""oxidase"",
    ""syngony"": ""cubic"",
    ""length"": 5,
    ""width"": 5,
    ""depth"": 200,
    ""surface"": ""poly(ethylene oxide)"",
    ""km_value"": 54.05,
    ""km_unit"": ""mM"",
    ""vmax_value"": 7.88,
    ""vmax_unit"": ""10-8 M s-1"",
    ""reaction_type"": ""TMB"",
    ""c_min"": 0.02,
    ""c_max"": 0.8,
    ""c_const"": 800,
    ""c_const_unit"": ""μM"",
    ""ccat_value"": 0.02,
    ""ccat_unit"": ""mg/mL"",
    ""ph"": 5.5,
    ""temperature"": 37
  }
]"
magnetic,nanomaterials,You are a domain-specific chemical information extraction assistant.,"You specialize in nanomaterials characterization, specifically in magnetic nanoparticles and their physical properties.",,"Your task is to extract **every** mention of magnetic properties for **ALL** nanoparticles from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `name` (string): material name (e.g., BFO, cobalt irin oxide and bismuth ferrite etc.).
- `np_core` (string): composition of material core (e.g., Gd2O3, Fe1Fe2O4 etc.).
- `np_shell` (string): composition of material shell (e.g., chitosan, Au1 etc.).  
- `core_shell_formula` (string): sometimes nanoparticle composition is represented as one formula containing both core and shell parts; core and shell materials are typically separated by a delimiter such as -, /, @, or |, e.g. Cr2O3-Co.  
- `np_shell_2` (string): first additional shell layer if present (e.g., PEG-5000, Curcumin etc.). 
- `np_hydro_size` (number): size of nanoparticles in solution obtained by dynamic light scattering (DLS) or similar, in nanometers (nm).
- `xrd_scherrer_size` (number): crystal size calculated from x-ray diffraction, usually represented in figures, in nanometers (nm).
- `emic_size` (number): size measured by electron microscopy, usually represented in figures, in nanometers (nm).
- `space_group_core` (string): space groups of core material (e.g., fd-3m, p4/mmm, etc.).
- `space_group_shell` (string): space groups of shell material (e.g., fd-3m, p4/mmm, etc.).
- `squid_sat_mag` (number): saturation magnetization (Ms, Bs) in emu/g.
- `squid_rem_mag` (number): remanent (remanence) magnetization (Mr, Br) in emu/g.
- `exchange_bias_shift_Oe` (number): exchange bias (Heb, exchange bias effect) in Oersted (Oe).
- `vertical_loop_shift_M_vsl_emu_g` (number): vertical loop shift (vertical bias) in emu/g.
- `hc_kOe` (number): coercivity (Hc, coercive force) in Oersted (Oe).
- `squid_h_max` (number): maximum magnetic field in kOe.
- `zfc_h_meas` (number): measurement field for ZFC in kOe.
- `instrument` (string): experimental instrument (e.g., Quantum Design 7 T SQUID magnetometer, Seifert XRD 3000P, etc.).
- `fc_field_T` (number): FC field in Tesla (T).
- `squid_temperature` (number): squid temperature in Kelvin.
- `coercivity` (number): coercivity (Hc) in kOe.
- `htherm_sar` (number): specific absorption rate (SAR) in W/g.
- `mri_r1` (number): MRI relaxation rate r1 in mM-1·s-1.
- `mri_r2` (number): MRI relaxation rates r2 in mM-1·s-1.
Extraction rules:
1. Extract **each** nanoparticle mention as a separate object. 
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts. 
3. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
4. If the original unit of coercivity or exchange bias is different, it must be converted into Oe: 1T = 1000 Oe, 1 mT = 10000 Oe, 1kOe = 1000 Oe.
5. If the original unit of remanent magnetization or saturation magnetization or vertical loop shift is different, it must be converted in emu/g: 1 A·m2/kg = 1 emu/g, 1 μ0M(T) = 0.01257 emu/g. 
6. Do not remove or alter the negative (-) or positive (+) signs for exchange bias and vertical loop shift. If the article does not explicitly state the sign, assume it is (+) by default.
7. The example of JSON below shows only one extracted sample, however your output should contain entries for **all** magnetic nanoparticles present in the article.
Output **must** be a single JSON array, like:
[
  {
  ""name"": ""Bismuth Ferrite"",
  ""np_core"": ""BiFeO3"",
  ""np_shell"": ""chitosan"",
  ""core_shell_formula"": ""BiFeO3-chitosan"",
  ""np_shell_2"": ""PEG-5000"",
  ""np_hydro_size"": 120,
  ""xrd_scherrer_size"": 45,
  ""emic_size"": 50,
  ""space_group_core"": ""R3c"",
  ""space_group_shell"": ""P2_1"",
  ""squid_sat_mag"": 40.5,
  ""squid_rem_mag"": 22.1,
  ""exchange_bias_shift_Oe"": 180,
  ""vertical_loop_shift_M_vsl_emu_g"": 5.6,
  ""hc_kOe"": 3.2,
  ""squid_h_max"": 5.0,
  ""zfc_h_meas"": 1.5,
  ""instrument"": ""Quantum Design 7 T SQUID magnetometer"",
  ""fc_field_T"": 0.1,
  ""squid_temperature"": 300,
  ""coercivity"": 3.5,
  ""htherm_sar"": 1.2,
  ""mri_r1"": 4.5,
  ""mri_r2"": 5.3
}
]"
cytotoxicity,nanomaterials,You are a domain-specific chemical information extraction assistant.,You specialize in cytotoxic nanoparticles.,,"Your task is to extract information for **ALL** cytotoxic nanoparticles from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `material` (string): Composition of the nanoparticle/material tested (e.g., ""SiO2"", ""Ag"").
- `shape` (string): Physical shape of the particle (e.g., ""Sphere"", ""Rod"").
- `coat_functional_group` (string): Surface coating or functionalization (e.g., ""CTAB"", ""PEG"").
- `synthesis_method` (string): Synthesis method (e.g., ""Precipitation"", ""Commercial"").
- `surface_charge` (string): one of `""Negative""`, `""Neutral""`, or `""Positive""`. Reported surface charge.
- `core_nm` (number): Primary particle size in nm.
- `size_in_medium_nm` (number): Hydrodynamic size in biological medium in nm.
- `hydrodynamic_nm` (number): Size in solution including coatings in nm.
- `potential_mv` (number): Surface charge in solution in mV.
- `zeta_in_medium_mv` (number): Zeta potential in medium in mV.
- `no_of_cells_cells_well` (number): Cell density per well in the assay.
- `human_animal` (string):  one of ""A"" for Animal or ""H"" for Human. Origin of cells.
- `cell_source` (string): Species/organism (e.g., ""Rat"", ""Human"").
- `cell_tissue` (string): Tissue origin of the cell line (e.g., ""Adrenal Gland"", ""Lung"").
- `cell_morphology` (string): Cell shape (e.g., ""Irregular"", ""Epithelial"").
- `cell_age` (string): Developmental stage of cells (e.g., ""Adult"", ""Embryonic"").
- `time_hr` (number): Exposure duration in hours.
- `concentration` (number): Tested concentration of the material (unit-specific, e.g., μg/mL).
- `test` (string): Cytotoxicity assay type (e.g., ""MTT"", ""LDH"").
- `test_indicator` (string): Reagent measured (e.g., ""TetrazoliumSalt"" for MTT).
- `viability_%` (number): Cell viability percentage relative to control.
Extraction rules:
1. If multiple values are reported (e.g., sizes), prioritize TEM-measured sizes for core_nm. For concentration, note unit context from article if ambiguous.
2. Error Handling: Prioritize table data over text; note assumptions for ambiguous data.
3. Viability Notes: For viability_percent, values >100% may indicate proliferation stimulation; extract as reported.
4. Extract **each** nanoparticle mention as a separate object. 
5. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts. 
6. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
7. The example of JSON below shows only two extracted samples, however your output should contain **all** nanoparticles present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""material"": ""SiO2"",
    ""shape"": ""Rod"",
    ""coat_functional_group"": ""PEG"",
    ""synthesis_method"": ""Precipitation"",
    ""surface_charge"": ""Negative"",
    ""core_nm"": 20.0,
    ""size_in_medium_nm"": 25.0,
    ""hydrodynamic_nm"": 30.0,
    ""potential_mv"": -15.0,
    ""zeta_in_medium_mv"": -10.0,
    ""no_of_cells_cells_well"": 5000.0,
    ""human_animal"": ""H"",
    ""cell_source"": ""Human"",
    ""cell_tissue"": ""Lung"",
    ""cell_morphology"": ""Epithelial"",
    ""cell_age"": ""Adult"",
    ""time_hr"": 24.0,
    ""concentration"": 100.0,
    ""test"": ""MTT"",
    ""test_indicator"": ""TetrazoliumSalt"",
    ""viability_%"": 85.0
  },
  {
    ""material"": ""Fe3O4"",
    ""shape"": ""Sphere"",
    ""coat_functional_group"": ""Dextran"",
    ""synthesis_method"": ""Thermal Decomposition"",
    ""surface_charge"": ""Positive"",
    ""core_nm"": 10.0,
    ""size_in_medium_nm"": 15.0,
    ""hydrodynamic_nm"": 18.0,
    ""potential_mv"": -30.0,
    ""zeta_in_medium_mv"": -15.0,
    ""no_of_cells_cells_well"": 10000.0,
    ""human_animal"": ""A"",
    ""cell_source"": ""Dog"",
    ""cell_tissue"": ""Kidney"",
    ""cell_morphology"": ""Epithelial"",
    ""cell_age"": ""Adult"",
    ""time_hr"": 24.0,
    ""concentration"": 300.0,
    ""test"": ""MTT"",
    ""test_indicator"": ""TetrazoliumSalt"",
    ""viability_%"": 115.09
  }
]"
seltox,nanomaterials,You are a domain-specific chemical information extraction assistant.,You specialize in antimicrobial nanoparticles.,,"Your task is to extract information for **ALL** antimicrobial nanoparticles from a scientific article and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `np` (string): Nanoparticle name (e.g., ""Ag"", ""Au"", ""ZnO"").
- `coating` (string): Surface coating/modification (""1"" for coating, ""0"" for none).
- `bacteria` (string): Bacterial strain tested (e.g., ""Escherichia coli"", ""Staphylococcus aureus"").
- `mdr` (number): Multidrug-resistant strain indicator, one of 1 or 0 (1 for multidrug-resistant, 0 for not multidrug-resistant).
- `strain` (string): Specific strain identifier (e.g., ""ATCC 25922"").
- `np_synthesis` (string): Synthesis method (e.g., ""green_synthesis"", ""chemical_synthesis"", or specific details like ""Green synthesis using Pimpinella anisum"").
- `method` (string): Assay type (e.g., ""MIC"", ""ZOI"", ""MBC"", ""MBEC"").
- `mic_np_µg_ml` (number): Minimum Inhibitory Concentration (MIC) in μg/mL.
- `concentration` (number): Concentration for Zone of Inhibition (ZOI) in μg/mL.
- `zoi_np_mm` (number): Zone of Inhibition in mm.
- `np_size_min_nm` (number): Minimum nanoparticle size in nm.
- `np_size_max_nm` (number): Maximum nanoparticle size in nm.
- `np_size_avg_nm` (number): Average nanoparticle size in nm.
- `shape` (string): Morphology (e.g., ""spherical"", ""triangular"").
- `time_set_hours` (number): Experiment duration in hours.
- `zeta_potential_mV` (number): Surface charge in mV.
- `solvent_for_extract` (string): Solvent used in green synthesis (e.g., ""water"", ""ethanol"").
- `temperature_for_extract_C` (number): Temperature during extract preparation in °C.
- `duration_preparing_extract_min` (number): Time to prepare extract in minutes.
- `precursor_of_np` (string): Chemical precursor (e.g., ""AgNO3"").
- `concentration_of_precursor_mM` (number): Precursor concentration in mM.
- `hydrodynamic_diameter_nm` (number): Hydrodynamic size in nm.
- `ph_during_synthesis` (number): pH of synthesis solution.
Extraction rules:
1. Extract solvents and precursors as strings without parsing into molecular components.
2. Extract **each** nanoparticle mention as a separate object. 
3. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts. 
4. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
5. The example of JSON below shows only two extracted samples, however your output should contain **all** nanoparticles present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""np"": ""Ag"",
    ""coating"": ""0"",
    ""bacteria"": ""Enterococcus faecalis"",
    ""mdr"": 0,
    ""strain"": ""ATCC 29212"",
    ""np_synthesis"": ""Green synthesis using Ixora brachypoda"",
    ""method"": ""MIC"",
    ""mic_np_µg_ml"": 32.0,
    ""concentration"": 10,
    ""zoi_np_mm"": 15,
    ""np_size_min_nm"": 10.0,
    ""np_size_max_nm"": 40.0,
    ""np_size_avg_nm"": 20.0,
    ""shape"": ""spherical"",
    ""time_set_hours"": 24,
    ""zeta_potential_mV"": -27.9,
    ""solvent_for_extract"": ""water"",
    ""temperature_for_extract_C"": 21.0,
    ""duration_preparing_extract_min"": 1440,
    ""precursor_of_np"": ""AgNO3"",
    ""concentration_of_precursor_mM"": 1.0,
    ""hydrodynamic_diameter_nm"": 55,
    ""ph_during_synthesis"": 8.5
  },
  {
    ""np"": ""ZnO"",
    ""coating"": ""0"",
    ""bacteria"": ""Klebsiella pneumoniae"",
    ""mdr"": 1,
    ""strain"": ""K-36"",
    ""np_synthesis"": ""Green synthesis using Phyllanthus emblica"",
    ""method"": ""MIC"",
    ""mic_np_µg_ml"": 6.25,
    ""concentration"": 64,
    ""zoi_np_mm"": 12,
    ""np_size_min_nm"": 20.0,
    ""np_size_max_nm"": 20.0,
    ""np_size_avg_nm"": 20.0,
    ""shape"": ""spherical"",
    ""time_set_hours"": 24.0,
    ""zeta_potential_mV"": -32,
    ""solvent_for_extract"": ""methanol"",
    ""temperature_for_extract_C"": 60,
    ""duration_preparing_extract_min"": 60,
    ""precursor_of_np"": ""Zn(NO3).6.H2O"",
    ""concentration_of_precursor_mM"": 10,
    ""hydrodynamic_diameter_nm"": 30,
    ""ph_during_synthesis"": 7.0
  }
]"
synergy,nanomaterials,You are a domain-specific chemical information extraction assistant.,You specialize in antimicrobial drug nanoparticle synergy.,,"Your task is to extract **every** mention of nanoparticle properties, drug details, and their synergistic antibacterial effects from a scientific article, and output a **JSON array** of objects **only** (no markdown, no commentary, no extra text).
Fields for each object:
- `NP` (string): nanoparticle name as cited in the text, e.g. , ""Ag"", ""Au"".
- `bacteria` (string): bacterial strain tested, e.g., ""Escherichia coli"".
- `strain` (string): specific strain identifier for the bacteria tested as cited in the text, e.g., ""ATCC 25922"", ""MTCC 443"".
- `NP_synthesis` (string): method by which the nanoparticles were synthesized, e.g., ""chemical synthesis"", ""hydrothermal synthesis"".
- `drug` (string): name of the conventional antibiotic or other antimicrobial drug used in combination with the nanoparticles, e.g., ""Ampicillin"", ""Ciprofloxacin"".
- `drug_dose_µg_disk` (number): specific dosage or concentration of the drug applied, primarily used for methods like disc diffusion assays, typically measured in micrograms per disk.
- `NP_concentration_µg_ml` (number): concentration of the nanoparticle used in the antibacterial assay, e.g., for MIC, ZOI, or viability studies, typically measured in micrograms per milliliter. 
- `NP_size_min_nm` (number): the smallest recorded size of the nanoparticle particles as determined by characterization techniques, measured in nanometers.
- `NP_size_max_nm` (number): the largest recorded size of the nanoparticle particles as determined by characterization techniques, measured in nanometers.
- `NP_size_avg_nm` (number): the average size of the nanoparticle particles, typically based on measurements from techniques like TEM or DLS, measured in nanometers.
- `shape` (string): observed morphology or physical shape of the nanoparticle particles, e.g., ""spherical"", ""rod-shaped"", ""cubic"", ""irregular"", ""nanosheets"".
- `method` (string): specific experimental technique employed to assess the antibacterial efficacy or interaction, e.g., ""MIC"", ""disc_diffusion"", ""well_diffusion"", ""broth microdilution"", ""time-kill assay"".
- `ZOI_drug_mm_or_MIC _µg_m` (number): quantitative measure of antibacterial activity for the drug alone. This will be the diameter of the ZOI in millimeters for disc diffusion assays, or the MIC value in micrograms per milliliter for methods like broth microdilution.
- `error_ZOI_drug_mm_or_MIC_µg_ml` (number): uncertainty or variability associated with the antibacterial activity measurement for the drug alone, often represented as the standard deviation.
- `ZOI_NP_mm_or_MIC_np_µg_ml` (number): The quantitative measure of antibacterial activity for the nanoparticle alone. This will be the ZOI diameter in millimeters or the MIC value in micrograms per milliliter.
- `error_ZOI_NP_mm_or_MIC_np_µg_ml` (number): uncertainty or variability associated with the antibacterial activity measurement for the nanoparticle alone.
- `ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml` (number): quantitative measure of antibacterial activity for the combination of the drug and the nanoparticle. This will be the ZOI diameter in millimeters or the MIC value in micrograms per milliliter.
- `error_ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml` (number): uncertainty or variability associated with the antibacterial activity measurement for the drug + nanoparticle combination.
- `fold_increase_in_antibacterial_activity` (number): numerical value indicating how much more effective the combination of the drug and nanoparticle is compared to the most effective component used individually.
- `zeta_potential_mV` (number): electrokinetic potential of the nanoparticle surface, measured in millivolts. It is an indicator of the surface charge and stability of the nanoparticles in suspension.
- `MDR` (string): indicator of whether the bacterial strain tested exhibits multidrug resistance, e.g., ""Yes"", ""No"", ""Resistant"", ""Susceptible"".
- `FIC` (number): Fractional Inhibitory Concentration index value, calculated to assess the interaction between the drug and nanoparticle. Values help determine if the interaction is synergistic (<0.5), additive (0.5-1.0), indifferent (1.0-4.0), or antagonistic (>4.0).
- `effect` (string): qualitative description of the interaction between the drug and nanoparticle based on the FIC index, e.g., ""synergistic"", ""additive"", ""antagonistic"", ""indifferent"".
- `time_hr` (number): duration of exposure of the bacterial cells to the antibacterial agents during the experiment, specified in hours.
- `coating_with_antimicrobial_peptide_polymers` (string): indicates whether the nanoparticles were modified with a coating of antimicrobial peptides or polymers to enhance their activity or targeting, e.g., ""yes"", ""no"", specifies the coating material.
- `combined_MIC` (number):  Minimum Inhibitory Concentration observed for the combination of an antimicrobial peptide / polymer coating and the nanoparticle, in micrograms per milliliter if applicable.
- `peptide_MIC` (number): Minimum Inhibitory Concentration of the antimicrobial peptide Used in isolation, in micrograms per milliliter if applicable.
- `viability_%` (number): percentage of bacterial cells that survive or remain viable after being exposed to the nanoparticle, drug, or combination for a specific time period.
- `viability_error` (number): associated error or standard deviation for the bacterial viability percentage measurement.
Extraction rules:
1. Extract **each** nanoparticles mention as a separate object.  
2. Do **not** filter, group, summarize, or deduplicate. Include repeated mentions and duplicates if they occur in different contexts.  
3. If you cannot find a required field for an object, re-check the context; if it’s still absent, set that field’s value to `""NOT_DETECTED""`.
4. The example of JSON below shows only two extracted samples, however your output should contain **all** nanoparticles present in the article.
Output **must** be a single JSON array, like:
[
  {
    ""NP"": ""Ag"",
    ""bacteria"": ""Pseudomonas aeruginosa"",
    ""strain"": ""ATCC 27853"",
    ""NP_synthesis"": ""Green synthesis using Gloeophyllum striatum"",
    ""drug"": ""Ampicillin"",
    ""drug_dose_µg_disk"": 16.0,
    ""NP_concentration_µg_ml"": 32.0,
    ""NP_size_min_nm"": 10.0,
    ""NP_size_max_nm"": 40.0,
    ""NP_size_avg_nm"": 20.0,
    ""shape"": ""spherical"",
    ""method"": ""MIC"",
    ""ZOI_drug_mm_or_MIC _µg_ml"": 16.0,
    ""error_ZOI_drug_mm_or_MIC_µg_ml"": 1.40,
    ""ZOI_NP_mm_or_MIC_np_µg_ml"": 32.0,
    ""error_ZOI_NP_mm_or_MIC_np_µg_ml"": 2.43,
    ""ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml"": 8.0,
    ""error_ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml"": 1.50,
    ""fold_increase_in_antibacterial_activity"": 2.0,
    ""zeta_potential_mV"": -34.0,
    ""MDR"": ""R"",
    ""FIC"": 0.5,
    ""effect"": ""synergistic"",
    ""time_hr"": 24.0,
    ""coating_with_antimicrobial_peptide_polymers"": ""AP Lysozyme hen egg-white"",
    ""combined_MIC"": 12,
    ""peptide_MIC"": 400,
    ""viability_%"": 87.0,
    ""viability_error"": 2.40
  },
  {
    ""NP"": ""Au"",
    ""bacteria"": ""Escherichia coli"",
    ""strain"": ""BJ915"",
    ""NP_synthesis"": ""purchased from Jinke Chemical Co"",
    ""drug"": ""Colistin"",
    ""drug_dose_µg_disk"": 10.0,
    ""NP_concentration_µg_ml"": 25.0,
    ""NP_size_min_nm"": 2.1,
    ""NP_size_max_nm"": 2.9,
    ""NP_size_avg_nm"": 2.5,
    ""shape"": ""cubic"",
    ""method"": ""MBC"",
    ""ZOI_drug_mm_or_MIC _µg_ml"": 4.0,
    ""error_ZOI_drug_mm_or_MIC_µg_ml"": 0.30,
    ""ZOI_NP_mm_or_MIC_np_µg_ml"": 12.50,
    ""error_ZOI_NP_mm_or_MIC_np_µg_ml"": 0.87,
    ""ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml"": 6.25,
    ""error_ZOI_drug_NP_mm_or_MIC_drug_NP_µg_ml"": 0.27,
    ""fold_increase_in_antibacterial_activity"": 1.16,
    ""zeta_potential_mV"": 14.0,
    ""MDR"": ""R"",
    ""FIC"": 0.75,
    ""effect"": ""P"",
    ""time_hr"": 24.0,
    ""coating_with_antimicrobial_peptide_polymers"": ""4,6-diamino-2-pyrimidinethiol + 1,1-dimethylbiguanide"",
    ""combined_MIC"": 4.0,
    ""peptide_MIC"": 13.20,
    ""viability_%"": 23.0,
    ""viability_error"": 2.25
  }
]"